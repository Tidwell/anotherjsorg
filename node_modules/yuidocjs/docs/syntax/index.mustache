<p>YUIDoc parses a modified form of JSDoc tags, here we will list the most common tags used and how
they are parsed.</p>

<div class="intro">
```
/**
* This is the description for my class
* @class MyClass
* @constructor
*/

/**
* My method description.  Like other pieces of your comment blocks, 
* this can span multiple lines.
* @method methodName
* @param {String} foo Argument 1
* @param {Object} config A config object
* @param {String} config.name The name on the config object
* @param {Function} config.callback A callback function on the config object
* @param {Boolean} [extra=false] Do extra, optional work
* @return {Boolean} Returns true on success
*/

/**
* My property description.  Like other pieces of your comment blocks, 
* this can span multiple lines.
* @property propertyName
* @type {Object}
*/
```
</div>


<h2>Primary Tags</h2>
<p>Each comment block must have one (and only one) of the following tags</p>

<table>
<tr>
    <th>Name</th>
    <th>Example</th>
    <th>Description</th>
</tr>
<tr id="module">
    <td>`module`</td>
    <td>
```
/**
Provides the base Widget class...

@module widget
**/
```
    </td>
    <td>There must be one module per source tree. By convention, put your module declaration at the top of the file that contains the main class for your module.</td>
</tr>
<tr id="class">
    <td>`class`</td>
    <td>
```
/**
A utility that brokers HTTP requests...

@class IO 
@constructor
**/
function IO (config) { 
```
    </td>
    <td>The string identifying the functional class on its parent object; 
        for example, the class for `Y.DD.Drag` would be `Drag` (and its `@namespace` would be `DD`).</td>
</tr>
<tr id="method">
    <td>`method`</td>
    <td>
```
/**
Returns this model's attributes as...

@method toJSON
@return {Object} Copy of ...
**/
toJSON: function () { 
```
    </td>
    <td>The name of a method on the current class.</td>
</tr>
<tr id="event">
    <td>`event`</td>
    <td>
```
/**
Fired when an error occurs...

@method error 
@param {String} msg A description of...
**/
var EVT_ERROR = 'error',
```
    </td>
    <td>In YUI, events are `Custom Events` fired off programmatically at interesting moments in
    a component's execution. The event tag is similar to method, but there is no return tag and i
    ts params are arguments passed to the event listener.</td>
</tr>
<tr id="property">
    <td>`property`</td>
    <td>
```
/**
Template for this view's container...

@property containerTemplate 
@type String
@default "<div/>"
**/
containerTemplate: '<div/>',
```
    </td>
    <td>The name of a property on the current class.</td>
</tr>
</table>

<h2>Secondary tags</h2>
<p>
    After choosing one of the five primary tags, you can further document a module, 
    class, method, event or property with one or more of the following secondary tags.
</p>
<table>
<tr>
    <th>Name</th>
    <th>Example</th>
    <th>Description</th>
</tr>
<tr id="submodule">
    <td>`submodule`</td>
    <td>
```
/**
@module app
@submodule view
**/
```
    </td>
    <td>YUIDoc supports the notion that a module is a submodule of a parent module. For 
    example, in YUI 3 `anim-scroll` is a submodule of anim. A submodule encompasses a 
    subset of the parent module's functionality. To use submodule designation, provide 
    the parent module's name as the module property and the submodule's name in the submodule property.
    </td>
</tr>
<tr id="namespace">
    <td>`namespace`</td>
    <td>
```
/**
@namespace Test.Mock
**/
```
    </td>
    <td>While it is optional to provide a namespace, it is recommended. This lets you describe 
    your class just with the name: For example, `Y.DD.Drag` has a namespace of `Y.DD`
    and a class of `Drag`.</td>
</tr>
<tr id="extends">
    <td>`extends`</td>
    <td>
```
/**
@class View
@constructor
@extends Base
**/
```
    </td>
    <td>Sets up an inheritance relationship between the current class and a parent class; 
    API docs will show and link to items inherited from the parent class.</td>
</tr>
<tr id="config">
    <td>`config`</td>
    <td>
```
/**
@config docScrollX 
@type Number 
**/
```
    </td>
    <td>A config is a managed configuration attribute. In YUI parlance, this is typically
    an attribute created and managed with the Config class (part of the Container Family).</td>
</tr>
<tr id="attribute">
    <td>`attribute`</td>
    <td>
```
/**
* Indicates whether this Widget
* has been rendered...
*
* @attribute rendered
* @readOnly
* @default false
* @type boolean
*/
ATTRS[RENDERED] = {
```
    </td>
    <td>An attribute is a managed configuration attribute. In YUI parlance, this is 
    typically an attribute created and managed with AttributeProvider 
    (part of the [YUI Element Utility][[yui-element]]). An attribute is similar
    to a config, but YUIDoc will autogenerate documentation for the change events 
    associated with the attribute as provided by Element. (Note: Unless you're using 
    YUI and referring to an attribute managed by AttributeProvider, you should avoid using this tag.)
    </td>
</tr>
<tr id="constructor">
    <td>`constructor`</td>
    <td>
```
/**
@class IO 
@constructor
**/
```
    </td>
    <td>The presence of this tag (which requires no description) indicates that this class is instantiable.</td>
</tr>
<tr id="static">
    <td>`static`</td>
    <td>
```
/**
YUI user agent detection...

@class UA
@static
**/


```
    </td>
    <td>If a class does not have a constructor, then the static tag should be present to signal 
    that it is a static class.</td>
</tr>
<tr id="final">
    <td>`final`</td>
    <td>
```
/**
Identifies state changes originating...

@property SRC_REPLACE
@type String
@static
@final
**/
```
    </td>
    <td>For constants and for read-only configs and attributes.</td>
</tr>
<tr id="param">
    <td>`*param`</td>
    <td>
```
/**
@param {String} name Attribute name 
   or object property path.
**/
```

```
/**
@param {Object} [options] Data to be 
    mixed into the event facade of the
    `change` event(s) for these 
    attributes.
  @param {Boolean} [options.silent=false] 
      If `true`, no `change` event will 
      be fired.
**/
```
    </td>
    <td>Defined as `@param {type} name description` or `@param name {type} description`, params can be used 
    with classes, methods and events.  Use `[name]` to indicate the param is optional, `name*` to
    indicate it is a place holder for 1..n arguments, and `[name*]` for 0..n arguments.</td>
</tr>
<tr id="return">
    <td>`return`</td>
    <td>
```
/**
@method generateClientId
@return {String} Unique clientId.
**/
```
    </td>
    <td>Defined as `@return {type} description`.</td>
</tr>
<tr id="for">
    <td>`for`</td>
    <td>
```
/**  
An inner class  
@class foo  
@for OuterClass  
**/
```
    </td>
    <td>Used to define an inner class:
After the class is done, you need to inform the parser to start working on the outer class again:

```
/**  
Another method for the outer class  
@method bar  
@for OuterClass  
**/
```
</td>
</tr>
<tr id="type">
    <td>`type`</td>
    <td>
```
/**
@type String
**/
```
```
/**
@type HTMLElement|Node|String 
**/
```
    </td>
    <td>For properties, configs and attributes. You can specify a single type, a list of legal types separated by vertical bars, or if you are lazy, "mixed".</td>
</tr>
<tr id="private">
    <td>`private`</td>
    <td>
```
/**
Reference to the internal JSONP 
instance used to make the queries.

@private
@property _jsonp
**/
```
    </td>
    <td>Privates by default are suppressed from the API docs. All methods and properties are 
    assumed to be public unless marked as private or protected.</td>
</tr>
<tr id="protected">
    <td>`protected`</td>
    <td>
```
/**
Removes the `container` from 
the DOM and ...
 
@method _destroyContainer
@protected
**/
```
    </td>
    <td>Used to designate members that should not be modified by implementers unless they are creating a subclass.</td>
</tr>
<tr id="requires">
    <td>`requires`</td>
    <td>
```
/**
@module event-simulate
@requires event
**/
```
    </td>
    <td>Used to identify dependencies in the module declaration.</td>
</tr>
<tr id="default">
    <td>`default`</td>
    <td>
```
/**
@default false
**/
```
    </td>
    <td>The default value of a property, config or attribute.</td>
</tr>
<tr id="uses">
    <td>`*uses`</td>
    <td>
```
/**
@class Panel
@constructor
@extends Widget
@uses WidgetAutohide
@uses WidgetButtons
...
**/
```
    </td>
    <td>For classes that use some kind of Object augmentation. If this object is defined and YUIDoc
    parses it, the properties from the "used" object will be displayed in the output.</td>
</tr>
<tr id="example">
    <td>`*example`</td>
    <td>
```
/**
@example
    model.set('foo', 'bar');
**/
```
    </td>
    <td>Items with this tag are automatically parsed with the Markdown and Code parser and 
    displayed below the item. <em>The code is not included raw, only in highlight form</em></td>
</tr>
<tr id="chainable">
    <td>`chainable`</td>
    <td>
```
/**
Renders this view ...

@method render
@chainable
**/
render: function () {
    return this;
},
**/
```
    </td>
    <td>Method returns itself so you can chain it with other calls on this object.</td>
</tr>
<tr id="deprecated">
    <td>`deprecated`</td>
    <td>
```
/**
@property locale
@type String
@deprecated Use `config.lang` instead.
**/
```
    </td>
    <td>Item is deprecated and will be removed in a future release.</td>
</tr>
<tr id="since">
    <td>`since`</td>
    <td>
```
/**
@since 3.4.0
**/
```
    </td>
    <td>Item was added to the source in this version.</td>
</tr>
<tr id="async">
    <td>`async`</td>
    <td>
```
/**
@async
**/
```
    </td>
    <td>Method is async and requires a callback. Uncommon.</td>
</tr>
<tr id="beta">
    <td>`beta`</td>
    <td>
```
/**
@beta
**/
```
    </td>
    <td>Item should be marked as in beta. Uncommon.</td>
</tr>
<tr id="bubbles">
    <td>`bubbles`</td>
    <td>
```
/**
Handles the mouseup DOM event...

@event drag:mouseup
@bubbles DDM
**/
```
    </td>
    <td>Event bubbles to another target</td>
</tr>
<tr id="extension">
    <td>`extension`<br>`extensionfor`<br>`extension_for`</td>
    <td>
```
/**
@class PjaxBase
@extensionfor Router
**/
```
    </td>
    <td>Item is an extension of passed Item.</td>
</tr>
</table>
<em><strong>*</strong> Denotes that it supports multiple tags in the same doc block.</em>

<h3>Parsed but not in the theme yet</h3>
<p>
    The following tags are parsed by the `DocParser` but are not in the default theme yet.
</p>
<table>
<tr id="author">
    <td>`author`</td>
    <td>
```
```
    </td>
    <td>Author information about this item</td>
</tr>
<tr id="broadcast">
    <td>`broadcast`</td>
    <td>
```
```
    </td>
    <td>Event broadcasts to a large audience than scoped</td>
</tr>
<tr id="category">
    <td>`*category`</td>
    <td>
```
```
    </td>
    <td>Category to place this item into.</td>
</tr>
</table>

<h2>Extra formatting</h2>

<p>
    YUIDoc supports 3 main forms of formatting your documentation. HTML,
    <a href="http://daringfireball.net/projects/markdown/">Markdown</a> &amp; <a href="http://rgrove.github.com/selleck/">Selleck</a>.
</p>

<table>
<tr>
    <td>`HTML`</td>
    <td>Doc comments may contain standard HTML markup and YUIDoc will display it as is.</td>
</tr>
<tr>
    <td>`Markdown`</td>
    <td>Full <a href="http://daringfireball.net/projects/markdown/syntax">Markdown syntax</a>
    is also supported.
    </td>
</tr>
<tr>
    <td>`Selleck`</td>
    <td><a href="http://rgrove.github.com/selleck/">Selleck's</a> additional parsing is also supported.</td>
</tr>
</table>

<h3>Markdown and Code Highlighting</h3>

<p>
Inside any documentation block you may use Markdown or Selleck based markup. If you indent your code snippets
YUIDoc will automatically wrap them in a code block and syntax highlight them for you.
</p>

```
/**
This is the __module__ description for the `YUIDoc` module.

    var options = {
        paths: [ './lib' ],
        outdir: './out'
    };

    var Y = require('yuidoc');
    var json = (new Y.YUIDoc(options)).run();

@class YUIDoc
@main yuidoc
*/
```

<p>
This is what the above would render to:
</p>

<div class="intro">
<p>This is the <strong>module</strong> description for the <code>YUIDoc</code> module.</p>
```
    var options = {
        paths: [ './lib' ],
        outdir: './out'
    };

    var Y = require('yuidoc');
    var json = (new Y.YUIDoc(options)).run();
```
</div>

<h3>Crosslinking</h3>

<p>
    We have also added a blockHelper in Handlebars that will allow you to "cross-link" your documentation together.
</p>

<p></p>

```
/**

This module also uses \{{#crossLink Foo}}, where Foo is a class or module name.

*/
```

<p>
This will generate an internal link to the other's API document.
</p>

```
<p>
This module also uses <a href="../classes/Foo.html" class="crosslink">Foo</a>, where Foo is a class or module name.
</p>
```
